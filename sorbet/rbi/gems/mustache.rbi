# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/mustache/all/mustache.rbi
#
# mustache-1.1.1

class Mustache
  def [](key); end
  def []=(key, value); end
  def compiled?; end
  def context; end
  def escape(value); end
  def escapeHTML(str); end
  def initialize(options = nil); end
  def initialize_settings; end
  def partial(name); end
  def path; end
  def raise_on_context_miss=(boolean); end
  def raise_on_context_miss?; end
  def render(data = nil, ctx = nil); end
  def render_file(name, context = nil); end
  def self.classify(underscored); end
  def self.compiled?; end
  def self.const_from_file(name); end
  def self.inheritable_config_for(attr_name, default); end
  def self.inherited(subclass); end
  def self.initialize_settings; end
  def self.partial(name); end
  def self.path; end
  def self.path=(path); end
  def self.raise_on_context_miss=(boolean); end
  def self.raise_on_context_miss?; end
  def self.render(*args); end
  def self.render_file(name, context = nil); end
  def self.rescued_const_get(name); end
  def self.template; end
  def self.template=(template); end
  def self.template_extension; end
  def self.template_extension=(template_extension); end
  def self.template_file; end
  def self.template_file=(template_file); end
  def self.template_name; end
  def self.template_name=(template_name); end
  def self.template_path; end
  def self.template_path=(path); end
  def self.templateify(obj, options = nil); end
  def self.underscore(classified = nil); end
  def self.view_class(name); end
  def self.view_namespace; end
  def self.view_namespace=(namespace); end
  def self.view_path; end
  def self.view_path=(path); end
  def template; end
  def template=(template); end
  def template_extension; end
  def template_extension=(template_extension); end
  def template_file; end
  def template_file=(template_file); end
  def template_name; end
  def template_name=(template_name); end
  def template_path; end
  def template_path=(path); end
  def templateify(obj); end
end
module Mustache::Enumerable
end
class Mustache::Parser
  def compile(template); end
  def content_tags(type, current_ctag_regex); end
  def ctag; end
  def ctag=(value); end
  def dispatch_based_on_type(type, content, fetch, padding, pre_match_position); end
  def error(message, pos = nil); end
  def find_closing_tag(scanner, current_ctag_regex); end
  def initialize(options = nil); end
  def offset; end
  def otag; end
  def otag=(value); end
  def position; end
  def regexp(thing); end
  def scan_tag_!(content, fetch, padding, pre_match_position); end
  def scan_tag_(content, fetch, padding, pre_match_position); end
  def scan_tag_=(content, fetch, padding, pre_match_position); end
  def scan_tag_block(content, fetch, padding, pre_match_position); end
  def scan_tag_close(content, fetch, padding, pre_match_position); end
  def scan_tag_comment(content, fetch, padding, pre_match_position); end
  def scan_tag_delimiter(content, fetch, padding, pre_match_position); end
  def scan_tag_inverted(content, fetch, padding, pre_match_position); end
  def scan_tag_open_partial(content, fetch, padding, pre_match_position); end
  def scan_tag_unescaped(content, fetch, padding, pre_match_position); end
  def scan_tags; end
  def scan_text; end
  def scan_until_exclusive(regexp); end
  def self.add_type(*types, &block); end
  def self.valid_types; end
end
class Mustache::Parser::SyntaxError < StandardError
  def initialize(message, position); end
  def to_s; end
end
class Mustache::Generator
  def compile!(exp); end
  def compile(exp); end
  def ev(s); end
  def initialize(options = nil); end
  def on_etag(name, offset); end
  def on_fetch(names); end
  def on_inverted_section(name, offset, content, raw, delims); end
  def on_partial(name, offset, indentation); end
  def on_section(name, offset, content, raw, delims); end
  def on_utag(name, offset); end
  def str(s); end
end
class Mustache::Template
  def compile(src = nil); end
  def initialize(source, options = nil); end
  def partials; end
  def render(context); end
  def sections; end
  def self.recursor(toks, section, &block); end
  def source; end
  def tags; end
  def to_s(src = nil); end
  def tokens(src = nil); end
end
class Mustache::ContextMiss < RuntimeError
end
class Mustache::Context
  def [](name); end
  def []=(name, value); end
  def current; end
  def escape(value); end
  def fetch(name, default = nil); end
  def find(obj, key, default = nil); end
  def find_in_hash(obj, key, default); end
  def has_key?(key); end
  def initialize(mustache); end
  def mustache_in_stack; end
  def partial(name, indentation = nil); end
  def pop; end
  def push(new_obj); end
  def template_for_partial(partial); end
end
module Mustache::Utils
end
class Mustache::Utils::String
  def classify; end
  def initialize(string); end
  def underscore(view_namespace); end
end
